/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "start"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
		           	var Taken_slot=arrayListOf("true","true","true","false","true")
		        	val MAX_LOAD=2
		        	var CURRENT_LOAD=0
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						CommUtils.outblue("[cargoservice] Inizia ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_for_request", cond=doswitch() )
				}	 
				state("waiting_for_request") { //this:State
					action { //it:State
						CommUtils.outblue("[cargoservice] Sta aspettando richieste")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleRequest",cond=whenRequest("load_product"))
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						CommUtils.outblue("[cargoservice] Riceve richiesta di caricamento")
						
								    		
								    var Causa="MAX_LOADreached"	 
								    var Reserved_slot=0   	
								    
								    if( CURRENT_LOAD<MAX_LOAD) {
								   	Causa="Nessuno_slot_libero"
								    for(i in 0..4){
								    if (Taken_slot[i]=="false") {
								    CURRENT_LOAD=CURRENT_LOAD+1
								    Reserved_slot = i+1
								    Taken_slot[i]="true"
								    break;
								    	
								    }
								    }
								    } 
						if( Reserved_slot!=0 
						 ){answer("load_product", "load_accepted", "load_accepted($Reserved_slot)"   )  
						}
						else
						 {answer("load_product", "load_refused", "load_refused($Causa)"   )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_for_request", cond=doswitch() )
				}	 
			}
		}
} 
