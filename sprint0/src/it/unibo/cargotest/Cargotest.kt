/* Generated by AN DISI Unibo */ 
package it.unibo.cargotest

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargotest ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "start"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						CommUtils.outyellow("[cargotest] Inizia")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="richiesta", cond=doswitch() )
				}	 
				state("richiesta") { //this:State
					action { //it:State
						CommUtils.outyellow("[cargotest] Invia una nuova richiesta")
						request("load_product", "load_product(1)" ,"cargoservice" )  
						request("load_product", "load_product(1)" ,"cargoservice" )  
						request("load_product", "load_product(1)" ,"cargoservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_for_response", cond=doswitch() )
				}	 
				state("waiting_for_response") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="loadAccepted",cond=whenReply("load_accepted"))
					transition(edgeName="t02",targetState="loadRefused",cond=whenReply("load_refused"))
				}	 
				state("loadAccepted") { //this:State
					action { //it:State
						CommUtils.outblue("[cargotest] risposta arrivata")
						if( checkMsgContent( Term.createTerm("load_accepted(SLOT)"), Term.createTerm("load_accepted(SLOT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val Msg=payloadArg(0).toInt()         
								CommUtils.outyellow("[cargotest] Richiesta accettata, slot n. $Msg ")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_for_response", cond=doswitch() )
				}	 
				state("loadRefused") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("load_refused(CAUSA)"), Term.createTerm("load_refused(CAUSA)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								       var Msg=payloadArg(0)
								CommUtils.outyellow("[cargotest] Richiesta rifiutata causa : $Msg ")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_for_response", cond=doswitch() )
				}	 
			}
		}
} 
