/* Generated by AN DISI Unibo */ 
package it.unibo.cargorobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargorobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "start"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				val Myname = "$name"
				var CurrentRequestSlot = 0
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						CommUtils.outyellow("[cargorobot] STARTED ")
						request("engage", "engage($Myname,300)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="waiting_for_request",cond=whenReply("engagedone"))
					transition(edgeName="t04",targetState="engage_refused",cond=whenReply("engagerefused"))
				}	 
				state("engage_refused") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("engagerefused(ARG)"), Term.createTerm("engagerefused(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val Msg=payloadArg(0) 
								CommUtils.outblack("[cargorobot] Engage refused motivo:$Msg")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("waiting_for_request") { //this:State
					action { //it:State
						CommUtils.outyellow("[cargorobot] waiting for request")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="goto_IOPort",cond=whenRequest("move_product"))
				}	 
				state("goto_IOPort") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("product(ID,SLOT)"), Term.createTerm("product(SLOT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentRequestSlot = payloadArg(0).toInt()  
								CommUtils.outblack("[cargorobot] Ricevuto move_product, slot richiesto: $CurrentRequestSlot")
								request("moverobot", "moverobot(5,0)" ,"basicrobot" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="goto_slot", cond=doswitch() )
				}	 
				state("goto_slot") { //this:State
					action { //it:State
						
									val XSlot=2
									val YSlot=2
									
						request("moverobot", "moverobot($XSlot,$YSlot)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="return_home", cond=doswitch() )
				}	 
				state("return_home") { //this:State
					action { //it:State
						request("moverobot", "moverobot(0,0)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
