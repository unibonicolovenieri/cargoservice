/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "start"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
		           	var Taken_slot=arrayListOf("false","false","false","false","true")
		        	val MAX_LOAD=2
		        	var CURRENT_LOAD=0
		        	var Product_weight = 0
		        	var Reserved_slot = 0
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						CommUtils.outyellow("[cargoservice] STARTED ")
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_for_request", cond=doswitch() )
				}	 
				state("waiting_for_request") { //this:State
					action { //it:State
						CommUtils.outyellow("[cargoservice] waiting for request")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="check_product",cond=whenRequest("load_product"))
				}	 
				state("check_product") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("product(ID)"), Term.createTerm("product(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val ID=payloadArg(0).toInt()
								request("getProduct", "product($ID)" ,"cargoservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="check_load",cond=whenReply("getProductAnswer"))
				}	 
				state("check_load") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("product(JSonString)"), Term.createTerm("product(JsonString)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											val Product=payloadArg(0)
											var Product_weight_tmp = 1 // main.java.Product.getJsonInt(Product, "weight") qui dava errore
											Product_weight = Product_weight_tmp
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="moveProduct", cond=doswitchGuarded({CURRENT_LOAD+ Product_weight <= MAX_LOAD  
					}) )
					transition( edgeName="goto",targetState="too_much_weight", cond=doswitchGuarded({! (CURRENT_LOAD+ Product_weight <= MAX_LOAD  
					) }) )
				}	 
				state("too_much_weight") { //this:State
					action { //it:State
						CommUtils.outblack("Il carico eccederebbe maxload, non è possibile eseguire la load")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_for_request", cond=doswitch() )
				}	 
				state("moveProduct") { //this:State
					action { //it:State
						 
									CURRENT_LOAD += Product_weight		      
								    Reserved_slot=0   
								    for(i in 0..4){
									    if (Taken_slot[i]=="false") {
										    Reserved_slot = i+1
										    Taken_slot[i]="true"
										    break;		    	
									    }
								    }
						request("move_product", "product($Reserved_slot)" ,"cargorobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="load_finished",cond=whenReply("movedProduct"))
				}	 
				state("load_finished") { //this:State
					action { //it:State
						CommUtils.outblack("Load completata il robot è in home ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_for_request", cond=doswitch() )
				}	 
			}
		}
} 
