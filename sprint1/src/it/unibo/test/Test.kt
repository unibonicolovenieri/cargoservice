/* Generated by AN DISI Unibo */ 
package it.unibo.test

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Test ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "start"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						CommUtils.outblue("[test] avviato")
						
									val Myname = "$name"
									val Product="'{\"productId\":1,\"name\":\"p2\",\"weight\":100}'"
									val ProductID=1
						 val Cur_prod_PID = ProductID.toInt()  
						CommUtils.outblue("$name | checking with productservice for the weight of PID: $Cur_prod_PID")
						request("engage", "engage($Myname,300)" ,"basicrobot" )  
						CommUtils.outyellow("[test]  mandata richiesta")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="createProduct",cond=whenReply("engagedone"))
				}	 
				state("createProduct") { //this:State
					action { //it:State
						
									val Product="'{\"productId\":1,\"name\":\"p2\",\"weight\":100}'"
									val ProductID=1
						request("createProduct", "product($Product)" ,"productservice" )  
						CommUtils.outyellow("[test]  mandata richiesta")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="createdProduct",cond=whenReply("createdProduct"))
				}	 
				state("createdProduct") { //this:State
					action { //it:State
						CommUtils.outyellow("[test]aaaaaaaaaaaaaaaaaa richiesta")
						if( checkMsgContent( Term.createTerm("productid(ID)"), Term.createTerm("productid(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outyellow("[test]aaaaaaaaaaaaaaaaaa richiesta")
								 val Msg=payloadArg(0)+1  
								CommUtils.outyellow("[cargotest] Richiesta accettata, slot n. $Msg ")
								CommUtils.outyellow("Engaged")
								request("moverobot", "moverobot($Msg,$Msg)" ,"basicrobot" )  
								CommUtils.outyellow("Engaged")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="moved",cond=whenReply("moverobotdone"))
				}	 
				state("moved") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moverobotok(ARG)"), Term.createTerm("moverobotdone(A,B)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblack("funzionamento")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("allProductsRecieved") { //this:State
					action { //it:State
						CommUtils.outyellow("Engaged")
						val X=1
									val Y=1 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("productRecieved") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
